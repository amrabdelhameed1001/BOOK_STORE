package org.example.GUIComponents;

import org.example.Controller;
import org.example.User;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Locale;

public class MainScreen {

    User user;
    ManageDeck manageDeck;
    DefaultTableModel cartDTM;
    private JPanel root;
    private JTabbedPane tabbedPane1;
    private JPanel logoutP;
    private JPanel cartP;
    private JPanel personalP;
    private JButton logOutButton;
    private JLabel fnameLabel;
    private JLabel lnameLabel;
    private JLabel unameLabel;
    private JLabel emailLabel;
    private JLabel addressLabel;
    private JLabel phoneLabel;
    private JTable cartTable;
    private JLabel totalCostLabel;
    private JButton checkoutButton;

    public MainScreen(User user) {
        this.user = user;
        $$$setupUI$$$();
        JPanel searchDeck = new SearchDeck(user.getType(), this).getRoot();
        tabbedPane1.insertTab("Search", null, searchDeck, "", 1);
        fnameLabel.setText(user.getFirstName());
        lnameLabel.setText(user.getLastName());
        unameLabel.setText(user.getUserName());
        emailLabel.setText(user.getEmail());
        addressLabel.setText(user.getAddress());
        phoneLabel.setText(user.getPhone());

        if (user.getType().equals("Manager")) {
            manageDeck = new ManageDeck();
            JPanel manageP = manageDeck.getRoot();
            tabbedPane1.insertTab("Manage", null, manageP, "", 0);
        }
        logOutButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int debug = 12;
                ((AppFrame) root.getTopLevelAncestor()).logout();
            }
        });
    }

    public void goToUpdateBook(int isbn) {
        tabbedPane1.setSelectedIndex(0);
        manageDeck.goToUpdateBook(isbn);
    }


    public void updateCart() {
        totalCostLabel.setText("Total = " + new Controller().viewTotalPrice());
        HashMap<String, Integer> quantity = new Controller().viewItems();
        HashMap<String, Float> price = new Controller().viewIndividualPrices();
        String[] keys = price.keySet().toArray(new String[0]);
        for (int i = 0; i < keys.length; i++) {
            Object[] row = new Object[4];
            row[0] = keys[i];
            row[1] = price.get(keys[i]);
            row[2] = quantity.get(keys[i]);
            row[3] = "Remove";
        }

    }

    public JPanel getRoot() {
        return root;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        root = new JPanel();
        root.setLayout(new BorderLayout(0, 0));
        tabbedPane1 = new JTabbedPane();
        root.add(tabbedPane1, BorderLayout.CENTER);
        personalP = new JPanel();
        personalP.setLayout(new GridBagLayout());
        tabbedPane1.addTab("Personal", personalP);
        final JLabel label1 = new JLabel();
        label1.setText("First Name");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.ipady = 30;
        personalP.add(label1, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        personalP.add(spacer1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.VERTICAL;
        personalP.add(spacer2, gbc);
        fnameLabel = new JLabel();
        fnameLabel.setText("Label");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        personalP.add(fnameLabel, gbc);
        final JLabel label2 = new JLabel();
        label2.setText("Last Name");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.ipady = 30;
        personalP.add(label2, gbc);
        lnameLabel = new JLabel();
        lnameLabel.setText("Label");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        personalP.add(lnameLabel, gbc);
        final JLabel label3 = new JLabel();
        label3.setText("User Name");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.ipady = 30;
        personalP.add(label3, gbc);
        unameLabel = new JLabel();
        unameLabel.setText("Label");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        personalP.add(unameLabel, gbc);
        final JLabel label4 = new JLabel();
        label4.setText("Email");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.ipady = 30;
        personalP.add(label4, gbc);
        emailLabel = new JLabel();
        emailLabel.setText("Label");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.WEST;
        personalP.add(emailLabel, gbc);
        final JLabel label5 = new JLabel();
        label5.setText("Address");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.ipady = 30;
        personalP.add(label5, gbc);
        addressLabel = new JLabel();
        addressLabel.setText("Label");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 5;
        gbc.anchor = GridBagConstraints.WEST;
        personalP.add(addressLabel, gbc);
        final JLabel label6 = new JLabel();
        label6.setText("Phone");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 6;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.ipady = 30;
        personalP.add(label6, gbc);
        phoneLabel = new JLabel();
        phoneLabel.setText("Label");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 6;
        gbc.anchor = GridBagConstraints.WEST;
        personalP.add(phoneLabel, gbc);
        cartP = new JPanel();
        cartP.setLayout(new BorderLayout(0, 0));
        tabbedPane1.addTab("Cart", cartP);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        cartP.add(panel1, BorderLayout.SOUTH);
        totalCostLabel = new JLabel();
        Font totalCostLabelFont = this.$$$getFont$$$(null, Font.BOLD, 22, totalCostLabel.getFont());
        if (totalCostLabelFont != null) totalCostLabel.setFont(totalCostLabelFont);
        totalCostLabel.setText("Total = ");
        panel1.add(totalCostLabel);
        checkoutButton = new JButton();
        checkoutButton.setText("Checkout");
        panel1.add(checkoutButton);
        final JScrollPane scrollPane1 = new JScrollPane();
        cartP.add(scrollPane1, BorderLayout.CENTER);
        cartTable.setAutoResizeMode(0);
        scrollPane1.setViewportView(cartTable);
        logoutP = new JPanel();
        logoutP.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        tabbedPane1.addTab("Log out", logoutP);
        logOutButton = new JButton();
        logOutButton.setText("Log out");
        logoutP.add(logOutButton);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
        String[] cartHeaders = {"Title", "Price", "Quantity", "Remove"};
        cartDTM = new DefaultTableModel(0, 0);
        cartDTM.setColumnIdentifiers(cartHeaders);
        cartTable = new JTable() {
            public boolean isCellEditable(int row, int col) {
                return false;
            }
        };
        cartTable.getTableHeader().setReorderingAllowed(false);
    }
}

